grammar
    = space (rule space)+;

rule
    = identifier space "=" space expression space ";";

expression
    = choice-expression;

choice-expression
    = sequence-expression (space "|" space sequence-expression)*;

sequence-expression
    = prefixed-expression (space prefixed-expression)*;

prefixed-expression
    = and-expression
    | not-expression
    | suffixed-expression;

and-expression
    = "&" space suffixed-expression;

not-expression
    = "!" space suffixed-expression;

suffixed-expression
    = zero-or-one-expression
    | zero-or-more-expression
    | one-or-more-expression
    | primary-expression;

zero-or-one-expression
    = primary-expression space "?";

zero-or-more-expression
    = primary-expression space "*";

one-or-more-expression
    = primary-expression space "+";

primary-expression
    =

identifier
    = identifier-start identifier-part*;

identifier-start
    = 'a'..'z'
    | 'A'..'Z'
    | "-";

identifier-part
    = identifier-start
    | '0'..'9';

space
    = white-space*;

string-literal
    = "\"" double-quoted-character* "\"";

character-literal
    = "'" single-quoted-character "'";

double-quoted-character
    = !("\"" | "\\") character
    | "\\" escape-sequence;

single-quoted-character
    = !("'" | "\\") character
    | "\\" escape-sequence;

escape-sequence
    = ascii-escape-sequence
    | binary-escape-sequence
    | quaternary-escape-sequence
    | octal-escape-sequence
    | hexadecimal-escape-sequence;

ascii-escape-sequence
    = "\\"
    | "\""
    | "'"
    | "0"
    | "a"
    | "b"
    | "t"
    | "n"
    | "v"
    | "f"
    | "r"
    | "e";

binary-escape-sequence
    = "b" binary-digit{8}+;

quaternary-escape-sequence
    = "q" quaternary-digit{4}+;

octal-escape-sequence
    = "o" octal-digit+;

hexadecimal-escape-sequence
    = "h" hexadecimal-digit+;

binary-digit
    = '0'..'1';

quaternary-digit
    = '0'..'3';

octal-digit
    = '0'..'7';

hexadecimal-digit
    = '0'..'9'
    | 'A'..'F';

white-space
    = '\t'..'\r'
    | " "
    | "\h85"
    | "\hA0"
    | "\h1680"
    | '\h2000'..'\h200A'
    | '\h2028'..'\h2029'
    | "\h202F"
    | "\h205F"
    | "\h3000";

character
    = '\0'..'\h10FFFF';
